{"title":"Java I/O","uid":4976747,"size":2235073,"categoryP":"other","categoryS":"e_books","magnet":"?xt=urn:btih:4942f851e154bd01f683651faa9ae4a0fe2fb255&amp;dn=Java+I%2FO&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":1,"leechers":0,"uploader":"VasiaZozulia","files":-1,"time":1246035490,"description":"Because it doesn't provide a printf() function like C/C++, some developers think Java isn't up to snuff with files and streams. Author Rusty Harold Elliotte argues against this notion in Java I/O, a book that shows how Java's stream support can help simplify network programming, internationalization, and even compression and encryption.\n\nThe book opens with an overview of Java's stream capabilities. (The author defends Java's lack of support for console input/output (I/O) since today's applications use graphical user interfaces anyway.) He shows how to open, read, and write local files in Java applications. His file viewer example presents data in a variety of formats. (This example is improved several times until it winds up supporting different international character sets by the end of the book.)\n\nNext the author covers network programming using URL and network streams, including sockets. Sections on filters show how classes can filter out characters within streams. The tour moves forward to cover data streams, which permit streaming of Java's primitive data types. Details on how to communicate within Java programs using pipes follow. In a notable chapter, the author thoroughly explicates Java's support for encryption, including hashing, the Data Encryption Standard (DES) algorithm, and ciphers.\n\nThe last portion of the book explains object serialization, which allows Java objects to save and restore their state, plus it includes sections on Java's support for data compression (and ZIP files) and multilingual Unicode character sets. (Java is prepared to handle virtually any of the world's languages with its reader and writer classes.) Finally, the author shows how you can format output in Java using its support for width and numeric precision APIs.\n\nIn all, Elliotte makes a good case that Java streams are a flexible and powerful part of the language, and certainly not a limitation\n","torrent":{"xt":"urn:btih:4942f851e154bd01f683651faa9ae4a0fe2fb255","amp;dn":"Java+I%2FO","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"4942f851e154bd01f683651faa9ae4a0fe2fb255","infoHashBuffer":{"type":"Buffer","data":[73,66,248,81,225,84,189,1,246,131,101,31,170,154,228,160,254,47,178,85]},"announce":[],"urlList":[]}}