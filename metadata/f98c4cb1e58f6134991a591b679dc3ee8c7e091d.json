{"title":"Lynda &amp;ndash; Code Clinic Ruby Problem Two Image Analysis_Kevin ","uid":11086697,"size":457682888,"categoryP":"other","categoryS":"other","magnet":"?xt=urn:btih:f98c4cb1e58f6134991a591b679dc3ee8c7e091d&amp;dn=Lynda+%26ndash%3B+Code+Clinic+Ruby+Problem+Two+Image+Analysis_Kevin+&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":1,"leechers":0,"uploader":"2boweb","files":133,"time":1411465741,"description":"Lynda Ã¢â‚¬â€œ Code Clinic Ruby Problem Two Image Analysis_Kevin Skoglund\nIntermediate Class | uploaed in Sept 23, 2014 by 2boweb\n\nIntroducing image analysis\n\n(clicks and whirs) - [Voiceover] Hello, and welcome to Code Clinic. My name is Kevin Skoglund. Code Clinic is a monthly course where unique problems introduced to a collection of lynda.com authors. In response, each author will create a solution using their programming language of choice. You can learn several things from Code Clinic: different approaches to solving a problem, the pros and cons of different languages, and some tips and tricks to incorporate into your own coding best practices.\n\nWe'll work on a problem centered around image analysis. In one sense, this is simply data analysis. Images are really nothing more than specialized and well-defined sets of data. An image consists of pixels. Pixels consist of data representing the color of the pixel, and in some cases, the pixel's transparency. The pixels are arranged in rows and in columns. When they're assembled correctly, they represent an image. Our brains are very good at recognizing patterns, but computers are not. Think about CAPTCHA security devices, those puzzles you sometimes see when logging into a website.\n\nThe CAPTCHA asks what letters and numbers are in the image. Information is obscured by random lines, sometimes by overlapping transparent blocks of color. All of those intersecting shapes make it difficult for a computer program to separate out the background noise from the actual data. Another example is the test to determine colorblindness. Letters and numbers are hidden in a circle filled with different color dots. If you're color blind, you will not be able to see the numbers. For a computer program, this can be incredibly difficult as it requires detecting an edge, as well as recognizing the overall shape.\n\nIt's difficult, even for the most advanced programmer. In this problem, we're trying to solve a common problem for many photographers: plagiarism. A photographer will take a picture and post it on the internet only to discover someone has stolen their image and placed a subset of that image on their website. For example, here's an image, and then a cropped version of that image. It would be extremely handy if there was a program searching the internet for cropped versions of an original image so that a photographer could protect their rights.\n\n[image=vZf3UAgw90]\n\nIn fact, Google image search will do just that. But we're curious about how it works and what the required code might look like. Here's the challenge: given two images, our program should determine if one image is a subset of the other image. If it is, it's a cropped image, it'll tell us so, but if it's not, if the images are different, it should tell us that it's not a match. We'll assume that both images are JPEG files and that the resolution and bit depth are the same for both.\n\nWe've provided a set of sample images to use. Our program should return results showing which images are cropped versions of other images. Perhaps you want to pause and create a solution of your own, how would you solve this problem? In the next videos, I'll show you how I solved this challenge.\n","torrent":{"xt":"urn:btih:f98c4cb1e58f6134991a591b679dc3ee8c7e091d","amp;dn":"Lynda+%26ndash%3B+Code+Clinic+Ruby+Problem+Two+Image+Analysis_Kevin+","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"f98c4cb1e58f6134991a591b679dc3ee8c7e091d","infoHashBuffer":{"type":"Buffer","data":[249,140,76,177,229,143,97,52,153,26,89,27,103,157,195,238,140,126,9,29]},"announce":[],"urlList":[]}}